def ECR_REPO // Define ECR_REPO variable in a higher scope
def CONTAINER_IMAGE // Define CONTAINER_IMAGE variable in a higher scope

pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
        AWS_ACCOUNT_ID = credentials('aws_account_id')
        ECR_REPO = ''
        ECS_CLUSTER = 'flask-crud-app-cluster'
        ECS_SERVICE = 'flask-crud-ecs-service'
        TASK_DEFINITION_FAMILY = 'flask-crud-family'
        CONTAINER_IMAGE = ''
        CPU = '256'
        MEMORY = '512'
        DESIRED_COUNT = '1'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/rajrules21/Jenkins-Projects']]])
            }
        }

        stage('Install dependencies') {
            steps {
                script {
                    // Install dependencies using pip
                    sh 'pip install -r Project-2/requirements.txt'
                }
            }
        }

         stage('Create ECR Repository') {
            steps {
                script {
                    // Run the Python script to create ECR repository
                    withAWS(region: AWS_DEFAULT_REGION) {
                        def ecrRepoOutput = sh(script: "python3 Project-2/create_ecr.py", returnStdout: true).trim()
                        def ecrRepo = ecrRepoOutput.tokenize()[2] 
                        // Parse the output to extract the repository name
                        ECR_REPO = ecrRepo
                        // Set the CONTAINER_IMAGE variable with the repository name
                        CONTAINER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO}"
                        echo "ECR_REPO: ${ECR_REPO}"
                        echo "CONTAINER_IMAGE: ${CONTAINER_IMAGE}"
                    }
                }
            }
         }
         
        stage('Display ECR Repo and Container Image') {
            steps {
                script {
                    // Display values of ECR_REPO and CONTAINER_IMAGE
                    echo "ECR_REPO: ${ECR_REPO}"
                    echo "CONTAINER_IMAGE: ${CONTAINER_IMAGE}"
                }
            }
        }
        

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(CONTAINER_IMAGE)
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                        docker.image(CONTAINER_IMAGE).push("latest")
                    }
                }
            }
        }

        stage('SAST with Snyk') {
            steps {
                script {
                    sh "snyk test --docker ${CONTAINER_IMAGE}:latest"
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                script {
                    // Update ECS service with new task definition
                    sh "python3 Project-2/ecs_script.py ${ECS_CLUSTER} ${TASK_DEFINITION_FAMILY} ${CONTAINER_IMAGE} ${CPU} ${MEMORY} ${ECS_SERVICE} ${DESIRED_COUNT}"
                }
            }
        }
    }
}
