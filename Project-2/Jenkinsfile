pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
        ECR_REPO = ''
        ECS_CLUSTER = 'flask-crud-app-cluster'
        ECS_SERVICE = 'flask-crud-ecs-service'
        TASK_DEFINITION_FAMILY = 'flask-crud-family'
        CONTAINER_IMAGE = ''
        CPU = '256'
        MEMORY = '512'
        DESIRED_COUNT = '1'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/rajrules21/Jenkins-Projects']]])
                //git 'https://github.com/rajrules21/Jenkins-Projects'
            }
        }


        stage('Install dependencies') {
            steps {
                script {
                    // Install dependencies using pip
                    sh 'pwd'
                    sh 'pip install -r requirements.txt'
                }
            }
        }

        stage('Create ECR Repository') {
            steps {
                script {
                    // Run Python script to create ECR repository
                    def ecrRepo = sh(script: 'python create_ecr.py', returnStdout: true).trim()
                    // Parse the output to extract the repository name
                    env.ECR_REPO = ecrRepo
                    // Set the CONTAINER_IMAGE variable with the repository name
                    env.CONTAINER_IMAGE = "${AWS_DEFAULT_REGION}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO}"
                }
            }
        } 


        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(CONTAINER_IMAGE)
                }
            }
        }

       

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}"
                        docker.image(CONTAINER_IMAGE).push("latest")
                    }
                }
            }
        }

        stage('SAST with Snyk') {
            steps {
                script {
                    sh "snyk test --docker ${CONTAINER_IMAGE}:latest"
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                script {
                    // Update ECS service with new task definition
                    sh "python ecs_script.py ${ECS_CLUSTER} ${TASK_DEFINITION_FAMILY} ${CONTAINER_IMAGE} ${CPU} ${MEMORY} ${ECS_SERVICE} ${DESIRED_COUNT}"
                }
            }
        }
    }
}
