pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials-id')
        AWS_DEFAULT_REGION = 'ap-south-1'
               
    }


    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/rajrules21/Jenkins-Projects']]])
                //git 'https://github.com/rajrules21/Jenkins-Projects'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build('flask-todo-app','./Project-1')
                }
            }
        }
        
        stage('Login to Docker Hub') {      	
            steps{                       	
	            sh 'echo $DOCKER_HUB_CREDENTIALS_PSW | docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin'                		
	            echo 'Login Completed'      
                }  
            }   

        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                sh 'docker tag flask-todo-app:latest $DOCKER_HUB_CREDENTIALS_USR/flask-todo-app:latest'
                sh 'docker push $DOCKER_HUB_CREDENTIALS_USR/flask-todo-app:latest'
                }
            }
        
        stage('Deploy to AWS EC2') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'my-app-server-ssh-id', keyFileVariable: 'awsPrivateKey', usernameVariable: 'awsUsername')]) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i \${awsPrivateKey} \${awsUsername}@65.0.122.78 \
                        'docker container stop \$(docker container ls -aq) && docker system prune -af && \
                         docker pull alexxy21/flask-todo-app && \
                         docker run -d -p 80:5000 alexxy21/flask-todo-app'
                        """
                    }
                }
            }
        }
    }

        
    
    post {
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
        always {  
	        sh 'docker logout'     
        }  
    }
}
